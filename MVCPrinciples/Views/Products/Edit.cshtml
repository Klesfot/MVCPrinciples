@model MVCPrinciples.Models.Product

@{
    ViewData["Title"] = "Edit";
    List<SelectListItem> selectListCategories = (ViewData["SelectListCategories"] != null ? ViewData["SelectListCategories"] as List<SelectListItem> : null) ?? throw new InvalidOperationException();
    List<SelectListItem> selectListSuppliers= (ViewData["SelectListSuppliers"] != null ? ViewData["SelectListSuppliers"] as List<SelectListItem> : null) ?? throw new InvalidOperationException();
}

<h1>Edit</h1>

<h4>Products</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ProductID" />
            <div class="form-group">
                <label asp-for="ProductName" class="control-label"></label>
                <input asp-for="ProductName" class="form-control" />
                <span asp-validation-for="ProductName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <tr>
                    <td> Supplier </td>
                    <td> @Html.DropDownListFor(x => x.SupplierId, selectListSuppliers, "- Please select a supplier -", new { @class = "form-control" }) </td>
                </tr>
                <span asp-validation-for="SupplierId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <tr>
                    <td> Category </td>
                    <td> @Html.DropDownListFor(x => x.CategoryId, selectListCategories, "- Please select a category -", new { @class = "form-control" }) </td>
                </tr>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="QuantityPerUnit" class="control-label"></label>
                <input asp-for="QuantityPerUnit" class="form-control" />
                <span asp-validation-for="QuantityPerUnit" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UnitPrice" class="control-label"></label>
                <input asp-for="UnitPrice" class="form-control" />
                <span asp-validation-for="UnitPrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UnitsInStock" class="control-label"></label>
                <input asp-for="UnitsInStock" class="form-control" />
                <span asp-validation-for="UnitsInStock" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UnitsOnOrder" class="control-label"></label>
                <input asp-for="UnitsOnOrder" class="form-control" />
                <span asp-validation-for="UnitsOnOrder" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ReorderLevel" class="control-label"></label>
                <input asp-for="ReorderLevel" class="form-control" />
                <span asp-validation-for="ReorderLevel" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Discontinued" class="control-label"></label>
                <input type="checkbox" checked="@(1 == 0)" asp-for="Discontinued"/>
                <span asp-validation-for="Discontinued" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
